plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id "io.freefair.lombok" version "5.3.0"
    id "com.github.hierynomus.license" version "0.15.0"
    // Nemerosa Versioning Plugin for the build info
    id "net.nemerosa.versioning" version "2.14.0"
}

jacoco {
    // Use JaCoCo 0.8.6 for (experimental) support for Java 15 class files.
    toolVersion = "0.8.6"
}

group = 'com.dumbdogdiner'

version = '2.1.0'

// License Plugin Options
license {
    header = project.file('LICENSE_HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    mapping("java", "SLASHSTAR_STYLE")
    exclude "**/*.json" // Exclude JSON to keep the font width data valid
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-XDignore.symbol.file"
}

configurations {
    jaxDoclet
    // give test dependencies access to compileOnly dependencies to emulate providedCompile
    testImplementation.extendsFrom compileOnly
}

repositories {
    mavenCentral()
    jcenter()

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }

    // Define a Ivy repo for the font width data (that way we don't need another plugin!)
    def ddd_mc_font = ivy {
        url 'https://dumbdogdiner.github.io/'
        patternLayout { artifact '/[module]/[revision]/[classifier].[ext]'}
        metadataSources { artifact() } 
    }
    // Only use the Ivy repo for font width data - speeds up dependency resolution
    exclusiveContent {
        forRepositories(ddd_mc_font)
        filter { includeGroup("dumbdogdiner") }
    }
}

dependencies {
    // Font width data (see above)
    compile 'dumbdogdiner:mc-font-extractor:main:mojangles_width_data@json'

    compileOnly 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.projectlombok:lombok:1.18.18'

    compileOnly 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.github.classgraph:classgraph:4.8.104'
    implementation 'com.github.seancfoley:ipaddress:5.3.3'
    
    // Tests - JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")

    // Tests - Mocking Suite (eg. mocking Bukkit for tests)
    testImplementation("org.mockito:mockito-core:3.7.7")
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
        // Show System.out for code ran by tests
        showStandardStreams = true
	}
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.enabled true
    }
}

task sources(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}


// Javadoc Fixes
// Some environments (such as the builder image) do not use UTF-8 as the default encoding!
// This sets UTF-8 as the encoding for the following tasks: delombok, compileJava, compileTestJava and javadoc.
delombok.encoding = "UTF-8"
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"


// Build Info
// Set the timestamp format
def dataBuildTimestamp = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"

// Import the filter
import org.apache.tools.ant.filters.ReplaceTokens

// Define the map containing the tokens we want to replace
def tokensMap = [
        BUILDINFO_VERSION: project.version,
        BUILDINFO_DATEFORMAT: dataBuildTimestamp,
        BUILDINFO_TIMESTAMP: new java.text.SimpleDateFormat(dataBuildTimestamp).format(new Date()),
        BUILDINFO_COMMIT: versioning.info.commit,
        BUILDINFO_BRANCH: versioning.info.branch,
        BUILDINFO_ISDIRTY: versioning.info.dirty.toString()
    ]

// Create task to replace the tokens with their actual values
// NOTE: At the moment this replaces tokens *globally* (format eg. @BUILDINFO_COMMIT@ in source code)
task processSourceTokens(type: Sync) {
    from sourceSets.main.java
    into 'build/processed/src/main/java'
    filter(ReplaceTokens, tokens: tokensMap)
    
    // Pretty print the build info
    println("\n----- StickyAPI Build Info -----\n")
    tokensMap.each { println "${String.format("%1\$-" + 10 + "s", it.key.replace("BUILDINFO_", "").toLowerCase())}\t${it.value}" }
}
// Use the filter task as the input for compileJava
compileJava.source = processSourceTokens.outputs

// Font Width Info
task copyMCFontExtractor(type: Copy) {
    def path = project.configurations.compile.find {it.name.startsWith("mc-font-extractor") }
    println path
    from file(path)
    // into file("src/main/resources")
    // - Please keep this comment for future reference.
    // - This is how we would do this if we weren't also adding build info (see processSourceTokens)
    destinationDir file("src/main/resources/generated/")
    rename 'mc-font-extractor-main-mojangles_width_data.json', 'mojangles_width_data.json'
}


// Run the license formatter and font data copier before compiling the source code.
tasks.compileJava.dependsOn licenseFormatMain, licenseFormatTest, copyMCFontExtractor
tasks.build.dependsOn sources
tasks.publish.dependsOn build


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DumbDogDiner/StickyAPI")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            artifact sources // Publish the output of the sources task
        }
    }
}
