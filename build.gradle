plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'io.freefair.lombok' version '5.3.0'
    id "com.diffplug.spotless" version "5.8.2"
}

jacoco {
    // Use JaCoCo 0.8.6 for (experimental) support for Java 15 class files.
    toolVersion = "0.8.6"
}

group = 'com.dumbdogdiner'
version = '2.0.0'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-XDignore.symbol.file"
}

configurations {
    jaxDoclet
    // give test dependencies access to compileOnly dependencies to emulate providedCompile
    testImplementation.extendsFrom compileOnly
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()

        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://papermc.io/repo/repository/maven-public/' }
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        ratchetFrom 'origin/master'

        java {
            importOrder()
            prettier(['prettier': '2.0.5', 'prettier-plugin-java': '0.8.0']).config(['parser': 'java', 'tabWidth': 4])
            // TODO: Someone please work out project-root relative path resolution so we can use licenseHeaderFile().
            licenseHeaderFile('../LICENSE_HEADER')
        }
    }
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
        // Show System.out for code ran by tests
        showStandardStreams = true
	}
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.enabled true
    }
}

task sources(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

tasks.publish.dependsOn build, sources

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DumbDogDiner/StickyAPI")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            artifact sources // Publish the output of the sources task
        }
    }
}
