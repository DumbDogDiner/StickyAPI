plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id "io.freefair.lombok" version "5.3.0"
    id "com.github.hierynomus.license" version "0.15.0"
    // Nemerosa Versioning Plugin for the build info
    id "net.nemerosa.versioning" version "2.14.0"
}

jacoco {
    // Use JaCoCo 0.8.6 for (experimental) support for Java 15 class files.
    toolVersion = "0.8.6"
}

group = 'com.dumbdogdiner'

version = '2.1.0'

// License Plugin Options
license {
    header = project.file('LICENSE_HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    mapping("java", "SLASHSTAR_STYLE")
    exclude "**/*.json" // Exclude JSON to keep the font width data valid
    exclude "**/org.mockito.plugins.MockMaker" // Exclude Mokito files
    exclude "**/*.md" // Exclude markdown files since it doesn't know what to do
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-XDignore.symbol.file"
    options.encoding = "UTF-8"
}

// Run the license formatter before compiling the source code.
tasks.compileJava.dependsOn licenseFormatMain, licenseFormatTest

configurations {
    jaxDoclet
    // give test dependencies access to compileOnly dependencies to emulate providedCompile
    testImplementation.extendsFrom compileOnly
}

repositories {
    mavenCentral()
    jcenter()
    google()

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    compileOnly 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.github.classgraph:classgraph:4.8.100'
    implementation 'com.github.seancfoley:ipaddress:5.3.3'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'com.google.guava:guava:30.1-jre'

    // Tests - JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")

    // Tests - Mocking Suite (eg. mocking Bukkit for tests)
    testImplementation("org.mockito:mockito-core:3.7.7")
}

task downloadTextures(type: Download) {
    sourceUrl = 'https://dumbdogdiner.github.io/mc-heads-resource/textures.json'
    target = new File('src/main/resources/generated/textures.json')
}

task downloadFontData(type: Download) {
    sourceUrl = "https://dumbdogdiner.github.io/mc-font-extractor/main/mojangles_width_data.json"
    target = new File('src/main/resources/generated/mojangles_width_data.json')
}

task cleanGenerated(type: Delete){
    delete('src/main/resources/generated')
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
        // Show System.out for code ran by tests
        showStandardStreams = true
	}
    finalizedBy jacocoTestReport // report is always generated after tests run
}

build {
    shouldRunAfter(clean)
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.enabled true
    }
}

task sources(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from 'build/processed/src/main/java'
}

delombok {
    encoding = "UTF-8"
    finalizedBy(javadoc)
    print(true)
    //verbose(true)
}

// Build Info
// Set the timestamp format
def dataBuildTimestamp = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"

// Import the filter
import org.apache.tools.ant.filters.ReplaceTokens

// Define the map containing the tokens we want to replace
def tokensMap = [
        BUILDINFO_VERSION: project.version,
        BUILDINFO_DATEFORMAT: dataBuildTimestamp,
        BUILDINFO_TIMESTAMP: new java.text.SimpleDateFormat(dataBuildTimestamp).format(new Date()),
        BUILDINFO_COMMIT: versioning.info.commit,
        BUILDINFO_BRANCH: versioning.info.branch,
        BUILDINFO_ISDIRTY: versioning.info.dirty.toString()
    ]

// Create task to replace the tokens with their actual values
// NOTE: At the moment this replaces tokens *globally* (format eg. @BUILDINFO_COMMIT@ in source code)
task processSourceTokens(type: Sync) {
    from sourceSets.main.java
    into 'build/processed/src/main/java'
    filter(ReplaceTokens, tokens: tokensMap)
    
    // Pretty print the build info
    println("\n----- StickyAPI Build Info -----\n")
    tokensMap.each { println "${String.format("%1\$-" + 10 + "s", it.key.replace("BUILDINFO_", "").toLowerCase())}\t${it.value}" }
}
// Use the filter task as the input for compileJava
compileJava.source = processSourceTokens.outputs


// Run the license formatter and font data copier before compiling the source code.
tasks.compileJava.dependsOn licenseFormatMain, licenseFormatTest, processResources
tasks.build.dependsOn sources
tasks.publish.dependsOn build

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

processResources {
    dependsOn(downloadTextures, downloadFontData)
}

javadoc {
    options.addBooleanOption('XDignore.symbol.file', true)
    options.addBooleanOption('-frames', true)
    options.addBooleanOption('private', true)
    options.addBooleanOption("-allow-script-in-comments",true)
    options.overview('src/main/overview.html')
    outputs.upToDateWhen { false }
    options.encoding("UTF-8")

    //TODO replace frames with JANITOR to get around removal of -frames in jdk15
    //options.footer("<script src=\"https://gitlab.com/gerib/userscripts/-/raw/master/janitor/janitor.user.js?inline=false\"></script>")
    test.ignoreFailures true;
    dependsOn(delombok)
    shouldRunAfter(clean)
}

publish {
    dependsOn(build, sources)
}

task browseJavadoc {
    dependsOn javadoc
    doLast {
        java.awt.Desktop.desktop.browse new URI(("file:///" << System.getProperty("user.dir").replace('\\','/') << "/build/docs/javadoc/index.html").toString())
    }
}

task rebuild {
    dependsOn clean
    finalizedBy build
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DumbDogDiner/StickyAPI")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            artifact sources // Publish the output of the sources task
        }
    }
}

class Download extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}