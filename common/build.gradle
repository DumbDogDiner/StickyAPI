buildscript {
    repositories {
        mavenCentral();
    }
    dependencies {
        classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '2.2.0.201212191850-r'
        classpath("com.squareup:javapoet:1.13.0")
        classpath("com.google.guava:guava:30.1-jre")
        classpath("de.skuzzle:semantic-version:2.1.0")
        classpath("org.projectlombok:lombok:1.18.20")
    }
}

plugins {
    // Nemerosa Versioning Plugin for the build info
    id "net.nemerosa.versioning" version "2.14.0"

    // for "api" in dependencies { }
    id "java-library"

    // For IntelliJ
    id "idea"
}

sourceSets {
    generated {
        java.outputDir = file('build/classes/main')
        java.srcDir file('src/gen/java')
        resources.srcDir file('src/gen/resources')
        compileClasspath += main.compileClasspath
    }

    serverVersion {
        java.outputDir = file('build/classes/main')

        java.srcDir file('src/serverVersion/java')
        // No resources necessary
        //resources.srcDir file('src/serverVersion/resources')
    }

    main {
        java.outputDir = file('build/classes/main')
        compileClasspath += generated.output
        runtimeClasspath += generated.output
        compileClasspath += serverVersion.output
        runtimeClasspath += serverVersion.output
    }

    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
        compileClasspath += serverVersion.output
        runtimeClasspath += serverVersion.output
    }
}

configurations {
    generatedCompileOnly.extendsFrom(compileOnly)
    generatedImplementation.extendsFrom(implementation)
    // this one doesnt do what is expected
    generatedApi.extendsFrom(api)
    testImplementation.extendsFrom compileOnly
}

dependencies {
    // Depend on the config project
    api project(":config") // api - transistively expose config dependency when implementing :common
    testImplementation project(":config").sourceSets.test.output

    // LocaleProviderTest - add snakeyaml so YamlProvider (from the :config project) can work properly
    // testRuntimeOnly = only accessible during the test job
    testRuntimeOnly "org.yaml:snakeyaml:1.27"

    // Font width data (see above)
    dddResource "dumbdogdiner:mc-font-extractor:main:mojangles_width_data@json"

    // Explicit GSON
    api "com.google.code.gson:gson:2.8.6"

    // Dependencies available in both bukkit and bungee
    compileOnly "net.md-5:bungeecord-chat:1.16-R0.5-SNAPSHOT"

    // Only included in paper?  (ShortID.java)
    compileOnly "commons-lang:commons-lang:2.6"

    // Needed for Buildinfo, explicitly
    generatedCompileClasspath("org.jetbrains:annotations:20.1.0")

    // Can be condensed with some magic that I need to look into
    generatedImplementation("de.skuzzle:semantic-version:2.1.0")
    api("de.skuzzle:semantic-version:2.1.0")

    // Include the most generic forms possible, used only by ServerVersion
    serverVersionCompileOnly "net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT"
    serverVersionCompileOnly "org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT"

    testImplementation "net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT"
    testImplementation "org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT"
}



test {
    // Dynamically we can have it grab allllllll of the other dependancy types, this is a todo
}



// Use --add-opens to ensure functionality of FieldUtil [java.lang.reflect.Field] (required in Java 16+)
// This will export java.lang.reflect to unnamed modules (eg. stickyapi) so that FieldUtil can still function.
// Alternative: ["--illegal-access=warn"] (same functionality as pre Java 16)
// JEP: https://openjdk.java.net/jeps/396
test.jvmArgs = ["--add-opens=java.base/java.lang.reflect=ALL-UNNAMED"]


idea {
    module {
        sourceDirs += file('src/gen/java')
        generatedSourceDirs += file('src/gen/java')
    }
}


/*
    Build Info
    ----------
    The following lines (and the processSourceTokens task) serve to embed build information
    such as versions, timestamps, commit details, as well as branch and working tree status
    into StickyAPI during build-time.

    When using StickyAPI, these values can be retrieved from their respective getters at
    com.dumbdogdiner.stickyapi.Stickyapi

    ----------

    The processSourceTokens task will also print out a list of all the tokens to be added
    to the build, for debugging reasons (eg. to ensure the info is correct)

    These is also an accompanying test at (test src) com.dumbdogdiner.stickyapi.StickyAPITest
 */


/*
    Font Width Info
    ----------
    This task serves to copy width data from the default Minecraft font into the final jar.
    This data is generated by <https://github.com/DumbDogDiner/mc-font-extractor>.
 */

// Font Width Info
task copyMCFontExtractor(type: Copy) {
    def path = project.configurations.dddResource.find { it.name.startsWith("mc-font-extractor") }
    println("common: Found font data at: " + path)
    from file(path)
    into file("src/gen/resources/")
    rename "mc-font-extractor-main-mojangles_width_data.json", "mojangles_width_data.json"
}


// Run the font data copier
tasks.processResources.dependsOn copyMCFontExtractor

apply from: 'versioning-buildinfo.gradle'
tasks.compileJava.dependsOn(buildInfo)

// Common build: create a jar
jar {
    from sourceSets.main.output
    //from sourceSets.generated.output
    //from sourceSets.serverVersion.output
}

// Common build: create uber sources from subproject sources
task commonSources(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
    //from sourceSets.generated.allSource
    //from sourceSets.serverVersion.allSource
}

task cleanGenerated(type: Delete){
    delete 'src/gen/'
}

tasks.clean.finalizedBy(cleanGenerated)
tasks.sourcesJar.finalizedBy commonSources
