// OMG JCX is *sooo* gay

plugins {
    // Nemerosa Versioning Plugin for the build info
    id "net.nemerosa.versioning" version "2.14.0"
}

dependencies {
    // Font width data (see above)
    compile 'dumbdogdiner:mc-font-extractor:main:mojangles_width_data@json'

    implementation 'com.google.code.gson:gson:2.8.6'
}


// Build Info
// Set the timestamp format
def dataBuildTimestamp = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"

// Import the filter
import org.apache.tools.ant.filters.ReplaceTokens

// Define the map containing the tokens we want to replace
def tokensMap = [
        BUILDINFO_VERSION: project.rootProject.version,
        BUILDINFO_DATEFORMAT: dataBuildTimestamp,
        BUILDINFO_TIMESTAMP: new java.text.SimpleDateFormat(dataBuildTimestamp).format(new Date()),
        BUILDINFO_COMMIT: versioning.info.commit,
        BUILDINFO_BRANCH: versioning.info.branch,
        BUILDINFO_ISDIRTY: versioning.info.dirty.toString()
    ]

// Create task to replace the tokens with their actual values
// NOTE: At the moment this replaces tokens *globally* (format eg. @BUILDINFO_COMMIT@ in source code)
task processSourceTokens(type: Sync) {
    from sourceSets.main.java
    into 'build/processed/src/main/java'
    filter(ReplaceTokens, tokens: tokensMap)
    
    // Pretty print the build info
    println("\n----- (Common) StickyAPI Build Info -----\n")
    tokensMap.each { println "${String.format("%1\$-" + 10 + "s", it.key.replace("BUILDINFO_", "").toLowerCase())}\t${it.value}" }
}
// Use the filter task as the input for compileJava
compileJava.source = processSourceTokens.outputs

// Font Width Info
task copyMCFontExtractor(type: Copy) {
    def path = project.configurations.compile.find {it.name.startsWith("mc-font-extractor") }
    println("common: Found font data at: " + path)
    from file(path)
    // into file("src/main/resources")
    // - Please keep this comment for future reference.
    // - This is how we would do this if we weren't also adding build info (see processSourceTokens)
    destinationDir file("src/main/resources/generated/")
    rename 'mc-font-extractor-main-mojangles_width_data.json', 'mojangles_width_data.json'
}

// Run the license formatter and font data copier before compiling the source code.
tasks.compileJava.dependsOn licenseFormatMain, licenseFormatTest, copyMCFontExtractor
