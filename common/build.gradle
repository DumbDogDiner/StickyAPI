plugins {
    // Nemerosa Versioning Plugin for the build info
    id "net.nemerosa.versioning" version "2.14.0"
}

dependencies {
    // Font width data (see above)
    compile "dumbdogdiner:mc-font-extractor:main:mojangles_width_data@json"

    implementation "com.google.code.gson:gson:2.8.6"

    // TODO: refactor ServerVersion to not depend on these!
    compileOnly "net.md-5:bungeecord-api:1.16-R0.5-SNAPSHOT"
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"


    // Dependencies available in both bukkit and bungee
    compileOnly "net.md-5:bungeecord-chat:1.16-R0.5-SNAPSHOT"
    compileOnly "org.yaml:snakeyaml:1.27"

    // Only included in paper? - could remove dep
    compileOnly "commons-lang:commons-lang:2.6"
}

/*
    Build Info
    ----------
    The following lines (and the processSourceTokens task) serve to embed build information
    such as versions, timestamps, commit details, as well as branch and working tree status
    into StickyAPI during build-time.

    When using StickyAPI, these values can be retrieved from their respective getters at
    com.dumbdogdiner.stickyapi.Stickyapi

    ----------

    The processSourceTokens task will also print out a list of all the tokens to be added
    to the build, for debugging reasons (eg. to ensure the info is correct)

    These is also an accompanying test at (test src) com.dumbdogdiner.stickyapi.StickyAPITest
 */

// Set the timestamp format
def dataBuildTimestamp = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"

// Import the filter
import org.apache.tools.ant.filters.ReplaceTokens

// Define the map containing the tokens we want to replace
def tokensMap = [
        BUILDINFO_VERSION: project.rootProject.version,
        BUILDINFO_DATEFORMAT: dataBuildTimestamp,
        BUILDINFO_TIMESTAMP: new java.text.SimpleDateFormat(dataBuildTimestamp).format(new Date()),
        BUILDINFO_COMMIT: versioning.info.commit,
        BUILDINFO_BRANCH: versioning.info.branch,
        BUILDINFO_ISDIRTY: versioning.info.dirty.toString()
    ]

// Create task to replace the tokens with their actual values
// NOTE: At the moment this replaces tokens *globally* (format eg. @BUILDINFO_COMMIT@ in source code)
task processSourceTokens(type: Sync) {
    from sourceSets.main.java
    into "build/processed/src/main/java"
    filter(ReplaceTokens, tokens: tokensMap)
    
    // Pretty print the build info
    println("\n----- (Common) StickyAPI Build Info -----\n")
    tokensMap.each { println "${String.format("%1\$-" + 10 + "s", it.key.replace("BUILDINFO_", "").toLowerCase())}\t${it.value}" }
}
// Use the filter task as the input for compileJava
compileJava.source = processSourceTokens.outputs


/*
    Font Width Info
    ----------
    This task serves to copy width data from the default Minecraft font into the final jar.
    This data is generated by <https://github.com/DumbDogDiner/mc-font-extractor>.
 */

// Font Width Info
task copyMCFontExtractor(type: Copy) {
    def path = project.configurations.compile.find {it.name.startsWith("mc-font-extractor") }
    println("common: Found font data at: " + path)
    from file(path)
    // into file("src/main/resources")
    // - Please keep this comment for future reference.
    // - This is how we would do this if we weren't also adding build info (see processSourceTokens, above comments)
    destinationDir file("src/main/resources/generated/")
    rename "mc-font-extractor-main-mojangles_width_data.json", "mojangles_width_data.json"
}

// Run the license formatter and font data copier before compiling the source code.
tasks.compileJava.dependsOn licenseFormatMain, licenseFormatTest, copyMCFontExtractor
