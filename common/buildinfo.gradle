buildscript {
    repositories {
        mavenCentral();
        jcenter();
        google();
    }
    dependencies {
        classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '2.2.0.201212191850-r'
        classpath("com.squareup:javapoet:1.13.0")
        classpath("com.google.guava:guava:30.1-jre")
        classpath("de.skuzzle:semantic-version:2.1.0")
        classpath("org.projectlombok:lombok:1.18.20")
    }
}

import com.squareup.javapoet.CodeBlock
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.TypeSpec
import de.skuzzle.semantic.Version
import lombok.Getter


import javax.lang.model.element.Modifier
import java.text.SimpleDateFormat

task DoBuildInfo {
    doFirst {
        TypeSpec buildInfoClass = TypeSpec.classBuilder("BuildInfo")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addField(FieldSpec.builder(Version.class, "version")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(Getter.class)
                        .initializer("\$T.parseVersion(\$S)", Version.class, Version.parseVersion("3.0.2"))
                        .build()
                )

                .addMethod(
                        MethodSpec.methodBuilder("getTimestamp")
                                .returns(String)
                                .addCode(CodeBlock.builder()
                                        .beginControlFlow("try")
                                        .addStatement("return new \$T(\$S).parse(\$S).toString()", SimpleDateFormat.class, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "2021-04-08T14:34:13.901-0600")
                                        .nextControlFlow("catch (\$T e)", Exception.class)
                                        .addStatement("e.printStackTrace()")
                                        .addStatement("return null")
                                        .endControlFlow()
                                        .build()
                                )

                                .addModifiers(Modifier.PUBLIC).build()
                )

                .addField(FieldSpec.builder(String, "branch")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(Getter)
                        .initializer("\"\$s\"", branch)
                        .build()
                )

                .addField(FieldSpec.builder(TypeName.BOOLEAN, "dirty")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(Getter)
                        .initializer("true")
                        .build()
                )
                .build()
        JavaFile jfile = JavaFile.builder(getProject().getRootProject().getGroup() as String, buildInfoClass).build();
        jfile.writeTo(getProject().getProjectDir().toPath().resolve("src/main/java").toFile());
    }
}